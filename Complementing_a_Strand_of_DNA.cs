using System;
using Xunit;

namespace Rosalind_CSharp
{
    public class Complementing_a_Strand_of_DNA
    {
        [Fact]
        public void SampleData()
        {
            var actualResult = Complement("AAAACCCGGT");
            Assert.Equal("ACCGGGTTTT", actualResult);
        }

        [Fact]
        public void ActualData()
        {
            var actualResult = Complement("CATAACGCCCCGTCAACACTGGGTTTTGCCAACATCGACACTGCCCTAGGAGCCAGGCCCATCTTGCTTCGTTTATCTCATATACGAGCCCAATCTAGACTTACACGGTAATAGAATACAATGATACCTTCTGAGCCAAGCAGTAGGCCTTCGCGGTGAATCAATCGTGCAAAACCTTACCGGTTTTCTCTCGAGATGGCGAATAATCATGCGTCTGAGCTGGATCCTTAGGTATGATTTTAACACGGGGGGTTTCGGCTGCGGCACATAACGGTAAAGTATCGCAAATTCTCAGGAGTTTCCCAACGCAGTAATTAGGCGAGTTGGCCCTTTGACGTTTGTTTCTGTGATTCTGAATCACCGGGTCTAGCATTTTCCGTAACGGGTTAAGCGGAGGAGACCATTGGACCGCTTTCGGGTGGTCTACGTGCTGCCACATCTGTCAGAGCAGCGAACGGCACAAATGCTTCCAATGAGACGTCCGAATACCTCAAACCCCCTATGTAACTAGCGGTTAATAGTTGCCGATCAGCACCGTAAGGCAGGGAAGCCGGTCCCCTGTTCAAATTCGCCCAGACTCCCTAGGTTTGAGTAAAGTCCAGTGGCCACATCCGGTGCGGATGGCCGCATTTGCCAAAAAATTATCTAGACTGGCGGCGAAGTAGGGGATTGCGACGTACCATGGCCATCTTATCTAGGGCCATATTTCCGCATATAGAACAGAAACCGGCAATCCCAGCATCTTACTGAAGCTGGCCAATATCTGGGGCATCGCGTGCTCTGAGTGGCCATCTAGTAAGTGCACGTATCCTAGGTTGTACCGGAGCTCCTGGTATGCCGTGCTGGAGATCTTC");
            Assert.Equal("GAAGATCTCCAGCACGGCATACCAGGAGCTCCGGTACAACCTAGGATACGTGCACTTACTAGATGGCCACTCAGAGCACGCGATGCCCCAGATATTGGCCAGCTTCAGTAAGATGCTGGGATTGCCGGTTTCTGTTCTATATGCGGAAATATGGCCCTAGATAAGATGGCCATGGTACGTCGCAATCCCCTACTTCGCCGCCAGTCTAGATAATTTTTTGGCAAATGCGGCCATCCGCACCGGATGTGGCCACTGGACTTTACTCAAACCTAGGGAGTCTGGGCGAATTTGAACAGGGGACCGGCTTCCCTGCCTTACGGTGCTGATCGGCAACTATTAACCGCTAGTTACATAGGGGGTTTGAGGTATTCGGACGTCTCATTGGAAGCATTTGTGCCGTTCGCTGCTCTGACAGATGTGGCAGCACGTAGACCACCCGAAAGCGGTCCAATGGTCTCCTCCGCTTAACCCGTTACGGAAAATGCTAGACCCGGTGATTCAGAATCACAGAAACAAACGTCAAAGGGCCAACTCGCCTAATTACTGCGTTGGGAAACTCCTGAGAATTTGCGATACTTTACCGTTATGTGCCGCAGCCGAAACCCCCCGTGTTAAAATCATACCTAAGGATCCAGCTCAGACGCATGATTATTCGCCATCTCGAGAGAAAACCGGTAAGGTTTTGCACGATTGATTCACCGCGAAGGCCTACTGCTTGGCTCAGAAGGTATCATTGTATTCTATTACCGTGTAAGTCTAGATTGGGCTCGTATATGAGATAAACGAAGCAAGATGGGCCTGGCTCCTAGGGCAGTGTCGATGTTGGCAAAACCCAGTGTTGACGGGGCGTTATG", actualResult);
        }

        private string Complement(string dnaString)
        {
            var result = new char[dnaString.Length];
            var forward = 0;
            for (var backward = dnaString.Length - 1; backward >= 0; backward--)
            {
                result[forward++] = dnaString[backward] switch
                {
                    'A' => 'T',
                    'T' => 'A',
                    'C' => 'G',
                    'G' => 'C',
                    _ => throw new Exception($"Unexpected letter {dnaString[backward]}.")
                };
            }
            return new string(result);
        }

    }
}
